#include <stdio.h>
//int map[101][101];
//int visit[101][101];
//char temp[101][101];
//int m, n;        
//int Queue[10000];
//int front, rear;
//void bfs(int x, int y){
//	int i, j;
//	int data_x, data_y;
//	int cal_x, cal_y;
//	int dir[8][2] = { { 1, 1 }, { 1, -1 }, { -1, -1 }, { -1, 1 }, { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };
//	Queue[rear++] = x;
//	Queue[rear++] = y;
//	while (rear != front){
//		data_x = Queue[front++];
//		data_y = Queue[front++];
//		for (i = 0; i < 8; i++){
//			cal_x = (data_x + dir[i][0]);
//			cal_y = (data_y + dir[i][1]);
//			if (cal_x < 0 || cal_x >= m || cal_y < 0 || cal_y >= n)
//				continue;
//			if (map[cal_x][cal_y] == -1)
//				continue;
//			if (visit[cal_x][cal_y] != 0 && visit[data_x][data_y] >= visit[cal_x][cal_y] + 1)
//				continue;
//
//			visit[cal_x][cal_y] = visit[data_x][data_y] + 1;
//			Queue[rear++] = cal_x;
//			Queue[rear++] = cal_y;
//		}
//		/*printf("---------------------------------------\n");
//		for (i = 0; i < m; i++){
//			for (j = 0; j < n; j++){
//				printf("%d ", visit[i][j]);
//			}
//			printf("\n");
//		}*/
//	}
//}
//int main()
//{
//
//	int itr;
//	int nCount;		/* 문제의 테스트 케이스 */
//	int q, w;
//	int max;
//	int value, flag;;
//	
//	scanf("%d", &nCount);	/* 테스트 케이스 입력 */
//
//	for (itr = 0; itr < nCount; itr++)
//	{
//
//		printf("#testcase%d\n", itr + 1);
//
//		scanf("%d %d", &m, &n); //m==y n==x
//		for (q = 0; q < m; q++){
//			scanf("%s", temp[q]);
//		}
//		for (q = 0; q < m; q++){
//			for (w = 0; w < n; w++)
//			{
//				if (temp[q][w] == '1'){
//					map[q][w] = -1;
//				}
//			}
//		}
//			
//		
//		front = 0; rear = 0;
//		visit[0][0] = 1;
//		bfs(0,0);
//			
//		
//
//		if (visit[m-1][n - 1] != 0){
//			printf("1\n");
//		}
//		else{
//			printf("0\n");
//			}	
//		}
//	for (q = 0; q < m; q++){
//		for (w = 0; w < n; w++){
//			visit[q][w] = 0;
//		}
//	}
//	return 0;
//	}