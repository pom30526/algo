
#include <stdio.h>

int n, m;
int dir[][4] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};      //[y,x]
int queue[2][10000];

int main()
{

   int itr, i, j;
   int nCount, count, Qsize ;      /* 문제의 테스트 케이스 */
   int grid[101][101];
   int n, m, x, y, tmp, start, tmpX, tmpY;

   scanf("%d", &nCount);   /* 테스트 케이스 입력 */

   for(itr=0; itr<nCount; itr++)
   {

      printf("#testcase%d\n",itr+1);
      scanf("%d %d", &n, &m);      //x y
          
       for(int i=1; i<=m; i++)
          for(int j=1; j<=n; j++)
            scanf("%d", &grid[i][j]); //입력 
          
       scanf("%d %d", &x, &y);      //x, y
 
       count = 1, Qsize = 1;        //count ==1 터트렸으니 1이다!~!! Qsize =1 처음엔 Qsize는 1 
       grid[y][x] = 0;              //지나온 길을 0으로 만들어준다
       queue[1][1] = x;	            //Queue 초기설정		    
       queue[0][1] = y;	            //Queue의 초기설정
       start = 1, tmp = 0;	    //start 1에서 시작하고 tmp =0;
          
       while(Qsize != 0){
          tmp = 0;
          for(i=0; i<Qsize; i++){   
             x = queue[1][start+i];  //Queue에 폭탄 터진 초기값 Deque
             y = queue[0][start+i];  //Queue에 폭탄 터진 초기값 Deque

             for(j=0; j<4; j++){     //temp y값에 4방향 가는 걸 넣는다
                tmpX = x+dir[j][1];		
                tmpY = y+dir[j][0];
                    
               if(tmpY > 0 && tmpX > 0 && tmpY <= m && tmpX <= n && grid[tmpY][tmpX] != 0){ //범위 조건 지나온길이 아니라면~!
                   queue[1][start+Qsize+tmp] = tmpX;	//enqueue
                   queue[0][start+Qsize+tmp] = tmpY;	//enqueue
                   
                   grid[tmpY][tmpX] = 0;	//지나온길 0으로 지정
                   tmp++;			//temp 올라가자
               }
             }
          }
          start += Qsize;                  //Deque 한만큼 
         Qsize = tmp;			   //Qsize =temp;
          count++;			   //count++;
       }
      printf("%d\n", count-1);

   }

   return 0;   /* 반드시 return 0으로 해주셔야합니다. */ 

}


